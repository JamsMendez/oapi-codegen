type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
    ssi StrictServerInterface
    middlewares []StrictMiddlewareFunc
}

{{range .}}
    {{$opid := .OperationId}}
    // {{$opid}} operation middleware
    func (sh *strictHandler) {{.OperationId}}(ctx *fiber.Ctx{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) error {
        var request {{$opid | ucFirst}}RequestObject

        {{range .PathParams -}}
            request.{{.GoName}} = {{.GoVariableName}}
        {{end -}}

        {{if .RequiresParamObject -}}
            request.Params = params
        {{end -}}

        {{ if .HasMaskedRequestContentTypes -}}
            request.ContentType = ctx.Get("Content-Type")
        {{end -}}

        {{$multipleBodies := gt (len .Bodies) 1 -}}
        {{range .Bodies -}}
            {{if $multipleBodies}}if strings.HasPrefix(ctx.Get("Content-Type"), "{{.ContentType}}") { {{end}}
                {{if eq .NameTag "JSON" -}}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := ctx.BodyParser(&body); err != nil {
                        return err
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Formdata" -}}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := ctx.BodyParser(&body); err == nil {
                        request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                    } else {
                        return err
                    }
                {{else if eq .NameTag "Multipart" -}}
	                b := ctx.Request().Body()
	                boundary := string(ctx.Request().Header.MultipartFormBoundary())
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = multipart.NewReader(bytes.NewReader(b), boundary)
                {{else if eq .NameTag "Text" -}}
                    data, err := io.ReadAll(bytes.NewReader(ctx.Request().Body()))
                    if err != nil {
                        return err
                    }
                    body := {{$opid}}{{.NameTag}}RequestBody(data)
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else -}}
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = bytes.NewReader(ctx.Request().Body())
                {{end}}{{/* if eq .NameTag "JSON" */ -}}
            {{if $multipleBodies}}}{{end}}
        {{end}}{{/* range .Bodies */}}

        handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error){
            return sh.ssi.{{.OperationId}}(ctx.Context(), request.({{$opid | ucFirst}}RequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "{{.OperationId}}")
        }

        response, err := handler(ctx, request)

        if err != nil {
            return err
        } else if validResponse, ok := response.({{$opid | ucFirst}}ResponseObject); ok {
            return validResponse.Visit{{$opid}}Response(ctx)
        } else if response != nil {
            return fmt.Errorf("Unexpected response type: %T", response)
        }
        return nil
    }
{{end}}
