

// This is a simple interface which specifies echo.Route addition functions which
// are present on both fiber.App and fiber.Router, since we want to allow using
// either of them for path registration
type FiberRouter interface {
    // HTTP methods
    Get(path string, handlers ...fiber.Handler) fiber.Router
    Head(path string, handlers ...fiber.Handler) fiber.Router
    Post(path string, handlers ...fiber.Handler) fiber.Router
    Put(path string, handlers ...fiber.Handler) fiber.Router
    Delete(path string, handlers ...fiber.Handler) fiber.Router
    Connect(path string, handlers ...fiber.Handler) fiber.Router
    Options(path string, handlers ...fiber.Handler) fiber.Router
    Trace(path string, handlers ...fiber.Handler) fiber.Router
    Patch(path string, handlers ...fiber.Handler) fiber.Router

    // Add allows you to specifiy a method as value
    Add(method, path string, handlers ...fiber.Handler) fiber.Router

    // All will register the route on all HTTP methods
    // Almost the same as app.Use but not bound to prefixes
    All(path string, handlers ...fiber.Handler) fiber.Router
}

// RegisterHandlers adds each server route to the FiberRouter.
func RegisterHandlers(router FiberRouter, si ServerInterface) {
    RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router FiberRouter, si ServerInterface, baseURL string) {
{{if .}}
    wrapper := ServerInterfaceWrapper{
        Handler: si,
    }
{{end}}
{{range .}}router.{{.Method}}(baseURL + "{{.Path | swaggerUriToEchoUri}}", wrapper.{{.OperationId}})
{{end}}
}
